app {
    name = "ecdouyin"
    file {
        domain = "http://192.168.0.97:30000"
        directory = "/tmp/ec"
    }
    selenium {
        driver = "/usr/bin/chromedriver"
        remoteUrl = "http://localhost:4444/wd/hub"
        implicitlyWait = 5
        proxy {
            port = 30001
        }
        size {
            width = 1000
            height = 1200
        }
        pool {
            minIdle = 5
            maxIdle = 10
            maxTotal = 30
            maxWaitMillis = 60000
            minEvictableIdleTimeMillis = 600000
            timeBetweenEvictionRunsMillis = 1000
            testOnBorrow = true
            blockWhenExhausted = true
        }
    }
    server {
        host = "0.0.0.0"
        host = ${?SERVER_HOST}
        port = 30000
        port = ${?SERVER_PORT}
    }
    proxy {
        enable = false
        host = "127.0.0.1"
        port = 1087
        timeout = 5s
    }
    redis {
        host = "dev2"
        host = ${?REDIS_HOST}
        port = 6379
        port = ${?REDIS_PORT}
        maxIdle = 20
        maxTotal = 100
        maxWaitMillis = -1
        password = ""
        password = ${?REDIS_PASSWORD}
    }
    client {
        debug = false
        debug = ${?CLIENT_DEBUG}
        clientTime = true
        clientTime = ${?CLIENT_USE_CLIENT_TIME}
        overTime = 500ms
        overTime = ${?CLIENT_OVER_TIME}
        host = "0.0.0.0"
        host = ${?CLIENT_HOST}
        port = 8080
        port = ${?CLIENT_PORT}
        cpu = 3
        cpu = ${?CLIENT_CPU}
        elements = 100
        elements = ${?CLIENT_ELEMENTS}
        time = 50ms
        time = ${?CLIENT_TIME}
        expire = 600
        expire = ${?CLIENT_EXPIRE}
    }
    db {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://dev2:3306/ecdouyin?useUnicode=true&useSSL=false&characterEncoding=utf-8"
        url = ${?JDBC_URL}
        username = "root"
        username = ${?JDBC_USERNAME}
        password = "root"
        password = ${?JDBC_PASSWORD}
        hikaricp {
            minimumIdle = 5
            maximumPoolSize = 30
            connectionTimeout = 10
            idleTimeout = 60
            maxLifetime = 3600000
            connectionInitSql = "SELECT 1"
        }
    }
    engine {
        trigger {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        entrust {
            speed = 200.milliseconds
            historySize = 100
            maxSize = 1000
        }
        position {
            speed = 200.milliseconds
        }
    }
}
akka {
    loglevel = "INFO"
    loglevel = ${?LOGLEVEL}
    http {
        host-connection-pool.max-connections = 100
        parsing.illegal-header-warnings = off
        client {
            connecting-timeout = 3s
        }
        server {
            # default 20s
            request-timeout = 10s
        }
    }
    cluster {
        log-info = off
        log-info-verbose = off
        min-nr-of-members = 1
        shutdown-after-unsuccessful-join-seed-nodes = 60s

        sharding {
            number-of-shards = 1000
            guardian-name = sharding
            # actor idled auto close
            passivate-idle-entity-after = off
        }
        bootstrap {
            new-cluster-enabled = on
        }
        seed-nodes = ["akka://"${app.name}"@127.0.0.1:"${akka.remote.artery.canonical.port}]
        min-nr-of-members = 1
        auto-down-unreachable-after = 10s
        seed-node-timeout = 10s
        shutdown-after-unsuccessful-join-seed-nodes = 20s
        http.route-providers-read-only = false
    }

    remote.artery {
       canonical {
          hostname = "127.0.0.1"
          port = 25520
          port = ${?REMOTE_PORT}
        }
    }

    io {
        udp {
            max-channels = 100000
            max-channels = ${?UDP_MAX_CHANNELS}
        }
    }


    persistence{
        journal.plugin = "jdbc-journal"
        snapshot-store.plugin = "jdbc-snapshot-store"
    }
    discovery {
        kubernetes-api {
            # 阿里云的ask会识别不出域名、只能用IP
            use-raw-ip = true
        }
    }
    management {
        cluster.bootstrap {
            contact-point-discovery {
                discovery-method = kubernetes-api
                required-contact-point-nr = 3
                required-contact-point-nr = ${?REQUIRED_CONTACT_POINT_NR}
            }
        }
    }

    actor {
      provider = cluster
      allow-java-serialization = off
      warn-about-java-serializer-usage = false
      serialize-messages = on
      serializers {
        java = "akka.serialization.JavaSerializer"
        kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
      }
      serialization-bindings {
        "java.lang.Object" = kryo
        "scala.collection.immutable.Vector" = kryo
        "com.dounine.ecdouyin.model.models.BaseSerializer" = kryo
      }
    }
}
akka-persistence-jdbc {
    logicalDeletion.enable = false
    shared-databases {
        slick {
            profile = "slick.jdbc.MySQLProfile$"
            db {
                url = ${app.db.url}
                user = ${app.db.username}
                password = ${app.db.password}
                driver = ${app.db.driver}
            }
        }
    }
}
jdbc-journal {
    use-shared-db = "slick"
    # 需要跟com.dounine.ecdouyin.store.AkkaPersistenerJournalTable中的_tableName一起修改
    tables.journal.tableName = "ecdouyin_journal"
}
jdbc-snapshot-store {
    use-shared-db = "slick"
    # 需要跟com.dounine.ecdouyin.store.AkkaPersistenerSnapshotTable中的_tableName一起修改
    tables.snapshot.tableName = "ecdouyin_snapshot"
}
jdbc-read-journal {
    use-shared-db = "slick"
    # 需要跟com.dounine.ecdouyin.store.AkkaPersistenerJournalTable中的_tableName一起修改
    tables.journal.tableName = "ecdouyin_journal"
}